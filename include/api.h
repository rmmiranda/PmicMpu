/*****************************************************************************
 * Filename:    api.h
 *
 * Copyright 2010, Research In Motion Ltd
 *
 * Author:      Ronald Miranda
 *
 * Created:     January 06, 2011
 *
 * Description: Definitions for an API between a PMIC and a host processor.
 * 				Copied from rocket_api.h authored by Chris Book (Dec 2, 2008).
 ****************************************************************************/
#ifndef __API_H__
#define __API_H__

#include "basetype.h"

typedef BYTE (*ApiRegReadFunc)( BYTE reg );

typedef void (*ApiRegWriteFunc)( BYTE reg, BYTE value );

typedef void (*ApiRegFunc)( void );


/**
 * Inits all api functionality, must be called
 * before any RegisterHandlers are assigned.
 *
 */
void ApiInit( void );


/**
 * Unregisters the handlers for a specific module
 * (IE an APP module when we are writing an boot update
 * over it should not be able to be called)
 *
 */
void ApiUnregisterHandlers( BYTE devId );


/**
 * Registers the RegRead/RegWrite/StartReceived/StopReceived
 * handlers for the specified DEVID
 *
 * NOTE: startRxd,stopRxd are optional and if not specified
 * nothing will be called.
 */
void ApiRegisterHandlers( BYTE devId, ApiRegReadFunc regRead,
                                      ApiRegWriteFunc regWrite,
                                      ApiRegFunc startRxd,
                                      ApiRegFunc stopRxd );

/**
 * Called for each byte requested over I2C for current transaction
 *
 * @return BYTE requested which will be relayed back to host
 */
BYTE ApiRegRead( BYTE devId, BYTE reg );

/**
 * Called for each BYTE written over I2C for current transaction
 *
 * @param devId Identifies device being written to
 * @param reg   Identifies register within device being written to
 * @param value Value which is being written
 */
void ApiRegWrite( BYTE devId, BYTE reg, BYTE value );

/**
 * Called when I2C START operation is received for current transaction
 *
 * If the module needs this kind of info to set something up before its
 * ready to handle the i2c comm requests it is handled here
 */
void ApiStartReceived( BYTE devId );

/**
 * Called when I2C STOP operation is received for current transaction.
 *
 * If the module needs this kind of info to clean something up/do something
 * it is done here.
 */
void ApiStopReceived( BYTE devId );

/**
 * Generates an interrupt for the host to handle
 * by the specified device
 *
 * If Rocket-Host interrupt is enabled, assert the line
 * to the host as required.
 *
 * @param devId Identifies interrupt source (device)
 */
void ApiInterruptHost( BYTE devId );

/**
 * Clears the interrupt generated by a specified device
 *
 * If Rocket-Host interrupt is enabled and no other pending
 * interrupts exist, deassert the interrupt line
 *
 * @param devId Identifies interrupt source to be deasserted
 */
void ApiClearInterruptHost( BYTE devId );

/**
 * Determines if register being accessed should not trigger an auto increment
 * of the register address being addressed. Also used to prevent auto pre-incrementing
 * of the first register being accessed
 *
 * returns true if the specified dev/reg access shouldn't autoincrement
 */
BOOL ApiAutoIncrementOverried( BYTE devId, BYTE reg );

#endif
