###############################################################################
# RocketHwvToH.py
#
# Generates a header file from the supplied HWV file used in the rocket
# bootloader
#
#
###############################################################################

import sys
import getopt
import re
import time

Entries = [ 'HARDWAREID',
            'POP_NUMBER',
            'PCB_NUMBER',
            'FREQUENCY_MAP',
            'NUM_PRG_NAMES',
            'PRG_NAME',
            'NUM_ENTRIES',
            'ENTRY']

FoundNamedEntries = {}
FoundNumberedEntries = {}

ScriptName = 0
HwvFileName = 0
HwvHeaderName = 0


def usage():
    print "RocketFirmwareBuilder.py <HWVFile.hwv> <HWVHeader.h>"


def parseEntry( line ):
    for entry in Entries:
        regstr = "%s *" % entry
        regex = re.compile( regstr )
        #find if the entry exists in this line
        str = regex.match( line )
        #if not, move on to next
        if str == None:
            continue
            
        #print line[str.end():]
        # search for anything before the next space
        str2 = re.compile( r"([0-9A-Za-z-_])+").match( line[str.end():])
        if str2 == None:
            continue
        
        # ENTRY consists of a number + value pair so we need to look for 2 values in this case
        if entry == 'ENTRY':
            str3 = re.compile( r" *([0-9A-Za-z-_])+").match( line[str.end()+str2.end():])
            if str3 == None:
                continue
            FoundNumberedEntries[ str2.group() ] = str3.group()
        else:          
            #print entry, str.group()
            FoundNamedEntries[ entry ] = str2.group()
        

def buildHeader():
    # Create/get each name for the release header file and its contents
    relVarName = re.search( r"[\\/]*(\w+)\.\w+\s*", HwvHeaderName ).group(1)
    # format the variable and define strings
    relVarName = relVarName.lower()
    relDefName = relVarName.upper()

    hdr = open( HwvHeaderName, "w")

    hdr.write( "/*******************************************************************************\n" )
    hdr.write( " * Generated by %s - DO NOT MANUALLY EDIT\n" % ScriptName )
    hdr.write( " * %s\n" % time.strftime("%d.%m.%Y %I:%M:%S %p") )
    hdr.write( " ******************************************************************************/\n" )
    hdr.write( "\n" )
    hdr.write( "#ifndef __%s_H__\n" % relDefName )
    hdr.write( "#define __%s_H__\n\n" % relDefName )
    
    hdr.write( "#define HW_VERSION_HARDWAREID %s\n\n" % FoundNamedEntries['HARDWAREID'] )
    hdr.write( "#define HW_VERSION_CLASS__BOARD %s\n" % FoundNumberedEntries['0x01'] )      # 0x01 == HW_VERSION_CLASS__BOARD
    hdr.write( "#define HW_VERSION_CLASS__POP %s\n\n" % FoundNumberedEntries['0x04'] )      # 0x04 == HW_VERSION_CLASS__POP

    hdr.write( "#endif /* __%s_H__ */\n" % relDefName )

    hdr.close()





if len(sys.argv) != 3:
    usage()
    sys.exit(-1)

ScriptName = re.search( r"[\\/]*(\w+\.\w+)\s*",sys.argv[0]).group(1)
HwvFileName = sys.argv[1]
HwvHeaderName = sys.argv[2]

#print "ScriptName: %s" % ScriptName
#print "HWV File:   %s" % HwvFileName
#print "Header:     %s" % HwvHeaderName
#print ""
#print ""

HwvFile = open( HwvFileName, "rb")

for line in HwvFile:
    parseEntry( line )

#print FoundNamedEntries
#print FoundNumberedEntries

buildHeader()

print "Generated %s from %s" % (HwvHeaderName, HwvFileName)

sys.exit()


